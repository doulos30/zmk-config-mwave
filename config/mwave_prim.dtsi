macros {
    ZMK_MACRO(usb_conn,
        wait-ms = <1>;
        tap-ms = <1>;
        bindings = <&out OUT_USB &adv_mode ADV_OFF>;
    )
    ZMK_MACRO(ble_zero,
        wait-ms = <1>;
        tap-ms = <1>;
        bindings = <&out OUT_BLE &bt BT_SEL 0 &adv_mode ADV_ON>;
    )
    ZMK_MACRO(ble_one,
        wait-ms = <1>;
        tap-ms = <1>;
        bindings = <&out OUT_BLE &bt BT_SEL 1 &adv_mode ADV_ON>;
    )
    ZMK_MACRO(bt_clear,
        wait-ms = <1>;
        tap-ms = <1>;
        bindings = <&bt BT_CLR>;
    )
    
    #include "version.dtsi"
};

endpoint_sideband_behaviors {
    auto-enable;
    compatible = "zmk,kscan-sideband-behaviors";
    kscan = <&kscan_sp3t_toggle>;

    first_toggle_sideband: first_toggle_sideband {
        column = <0>;
        bindings = <&usb_conn>;
    };

    second_toggle_sideband: second_toggle_sideband {
        column = <1>;
        bindings = <&ble_zero>;
    };

    third_toggle_sideband: third_toggle_sideband {
        column = <2>;
        bindings = <&ble_one>;
    };
};

behaviors {
    bth: bt_hold {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <2000>;
        bindings = <&bt_clear>, <&none>;
        display-name = "BT-hold-clear";
    };
    
    // Add just this one simple behavior definition
    hypr: hyper_key {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LC(LS(LA(LGUI)))>;
        display-name = "Hyper Key";
    };

    // Home row mods - start with just this definition
    hrm: home_row_mods {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <200>;
        quick-tap-ms = <175>;
        global-quick-tap;
        bindings = <&kp>, <&kp>;
        display-name = "Home Row Mods";
    };

    // Fast home row mods (for frequently accessed modifiers)
    fhrm: fast_home_row_mods {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <150>;  // Shorter tapping term for faster activation
        quick-tap-ms = <150>;
        global-quick-tap;
        bindings = <&kp>, <&kp>;
        display-name = "Fast Home Row Mods";
    };

    // Slow home row mods (for modifiers you don't want to trigger accidentally)
    shrm: slow_home_row_mods {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";  // More biased toward tapping
        tapping-term-ms = <250>;   // Longer tapping term for more deliberate holds
        quick-tap-ms = <200>;
        global-quick-tap;
        bindings = <&kp>, <&kp>;
        display-name = "Slow Home Row Mods";
    };

    // Action home row mods (for non-modifier actions like Tab and Enter)
    ahrm: action_home_row_mods {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";  // Better for action keys
        tapping-term-ms = <200>;
        quick-tap-ms = <175>;
        bindings = <&kp>, <&kp>;
        display-name = "Action Home Row Mods";
    };

}; 

// Add after your existing behaviors section:

combos {
    compatible = "zmk,combos";
    
    // Your existing combos
    combo_esc {
        timeout-ms = <50>;
        key-positions = <32 33>;  // Q and W keys
        bindings = <&kp ESC>;
    };
    
    combo_enter {
        timeout-ms = <50>;
        key-positions = <53 54>;  // J and K keys
        bindings = <&kp ENTER>;
    };
    
    
    // Backspace combo (U+I)
    combo_bspc {
        timeout-ms = <50>;
        key-positions = <38 39>;  // U and I keys
        bindings = <&kp BSPC>;
    };
    
    // Tab combo (A+S)
    combo_tab {
        timeout-ms = <50>;
        key-positions = <47 48>;  // A and S keys
        bindings = <&kp TAB>;
    };
    
    // Delete combo (Y+U)
    combo_del {
        timeout-ms = <50>;
        key-positions = <37 38>;  // Y and U keys
        bindings = <&kp DEL>;
    };
    
    // Caps Lock combo (F+G)
    combo_caps {
        timeout-ms = <50>;
        key-positions = <50 51>;  // F and G keys
        bindings = <&kp CAPS>;
    };
    
    // Layer activation combo (Z+X)
    combo_layer {
        timeout-ms = <50>;
        key-positions = <61 62>;  // Z and X keys
        bindings = <&to 1>;  // Switch to layer 1
    };
    
    // Hyper combo (C+V)
    combo_hyper {
        timeout-ms = <50>;
        key-positions = <63 64>;  // C and V keys
        bindings = <&hypr>;  // Your custom hyper key
    };
};